import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

from pathlib import Path
from sklearn.model_selection import train_test_split

import tensorflow as tf

from sklearn.metrics import confusion_matrix, classification_report

positive_dir = Path('/kaggle/input/tomatoleaf/TomatoLeaf/POSITIVE')
negative_dir = Path('/kaggle/input/tomatoleaf/TomatoLeaf/NEGATIVE')

def generate_df(image_dir, label):
    filepaths = pd.Series(list(image_dir.glob(r'*.jpg')), name='Filepath').astype(str)
    labels = pd.Series(label, name='Label', index=filepaths.index)
    df = pd.concat([filepaths, labels], axis=1)
    return df

positive_df = generate_df(positive_dir, label="POSITIVE")
negative_df = generate_df(negative_dir, label="NEGATIVE")

all_df = pd.concat([positive_df, negative_df], axis=0).sample(frac=1.0, random_state=1).reset_index(drop=True)
all_df


/////***** Output of above snippet*****/////
	Filepath	Label
0	/kaggle/input/tomatoleaf/TomatoLeaf/POSITIVE/0...	POSITIVE
1	/kaggle/input/tomatoleaf/TomatoLeaf/POSITIVE/B...	POSITIVE
2	/kaggle/input/tomatoleaf/TomatoLeaf/NEGATIVE/h...	NEGATIVE
3	/kaggle/input/tomatoleaf/TomatoLeaf/POSITIVE/L...	POSITIVE
4	/kaggle/input/tomatoleaf/TomatoLeaf/POSITIVE/a...	POSITIVE
...	...	...
3279	/kaggle/input/tomatoleaf/TomatoLeaf/NEGATIVE/h...	NEGATIVE
3280	/kaggle/input/tomatoleaf/TomatoLeaf/POSITIVE/B...	POSITIVE
3281	/kaggle/input/tomatoleaf/TomatoLeaf/POSITIVE/B...	POSITIVE
3282	/kaggle/input/tomatoleaf/TomatoLeaf/POSITIVE/I...	POSITIVE
3283	/kaggle/input/tomatoleaf/TomatoLeaf/POSITIVE/6...	POSITIVE
3284 rows Ã— 2 columns

///// END /////

train_df, test_df = train_test_split(
    all_df.sample(3284, random_state=1),
    train_size=0.7,
    shuffle=True,
    random_state=1
)


train_gen = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)

test_gen = tf.keras.preprocessing.image.ImageDataGenerator(
    rescale=1./255
)



train_data = train_gen.flow_from_dataframe(
    train_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(120, 120),
    color_mode='rgb',
    class_mode='binary',
    batch_size=32,
    shuffle=True,
    seed=42,
    subset='training'
)

val_data = train_gen.flow_from_dataframe(
    train_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(120, 120),
    color_mode='rgb',
    class_mode='binary',
    batch_size=32,
    shuffle=True,
    seed=42,
    subset='validation'
)

test_data = train_gen.flow_from_dataframe(
    test_df,
    x_col='Filepath',
    y_col='Label',
    target_size=(120, 120),
    color_mode='rgb',
    class_mode='binary',
    batch_size=32,
    shuffle=False,
    seed=42
)



/////***** Output of Above snippet code*****/////

Found 1839 validated image filenames belonging to 2 classes.
Found 459 validated image filenames belonging to 2 classes.
Found 986 validated image filenames belonging to 2 classes.

///// END/////


inputs = tf.keras.Input(shape=(120, 120, 3))
x = tf.keras.layers.Conv2D(filters=16, kernel_size=(3, 3), activation='relu')(inputs)
x = tf.keras.layers.MaxPool2D(pool_size=(2, 2))(x)
x = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu')(x)
x = tf.keras.layers.MaxPool2D(pool_size=(2, 2))(x)
x = tf.keras.layers.GlobalAveragePooling2D()(x)
outputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)

model = tf.keras.Model(inputs=inputs, outputs=outputs)

model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy']
)

print(model.summary())

/////***** output of above code snippet****/////

Model: "model"
_________________________________________________________________
 Layer (type)                Output Shape              Param #   
=================================================================
 input_1 (InputLayer)        [(None, 120, 120, 3)]     0         
                                                                 
 conv2d (Conv2D)             (None, 118, 118, 16)      448       
                                                                 
 max_pooling2d (MaxPooling2D  (None, 59, 59, 16)       0         
 )                                                               
                                                                 
 conv2d_1 (Conv2D)           (None, 57, 57, 32)        4640      
                                                                 
 max_pooling2d_1 (MaxPooling  (None, 28, 28, 32)       0         
 2D)                                                             
                                                                 
 global_average_pooling2d (G  (None, 32)               0         
 lobalAveragePooling2D)                                          
                                                                 
 dense (Dense)               (None, 1)                 33        
                                                                 
=================================================================
Total params: 5,121
Trainable params: 5,121
Non-trainable params: 0
_________________________________________________________________
None

///// END /////

history = model.fit(
    train_data,
    validation_data=val_data,
    epochs=100
)


/////***** Output of above code snippet*****/////
Epoch 1/100
58/58 [==============================] - 16s 271ms/step - loss: 0.3497 - accuracy: 0.8439 - val_loss: 0.3848 - val_accuracy: 0.8170
Epoch 2/100
58/58 [==============================] - 16s 278ms/step - loss: 0.3589 - accuracy: 0.8412 - val_loss: 0.4054 - val_accuracy: 0.7996
Epoch 3/100
58/58 [==============================] - 16s 270ms/step - loss: 0.3489 - accuracy: 0.8483 - val_loss: 0.3897 - val_accuracy: 0.8105
Epoch 4/100
58/58 [==============================] - 16s 274ms/step - loss: 0.3433 - accuracy: 0.8483 - val_loss: 0.4010 - val_accuracy: 0.8017
Epoch 5/100
58/58 [==============================] - 16s 267ms/step - loss: 0.3431 - accuracy: 0.8412 - val_loss: 0.3707 - val_accuracy: 0.8279
Epoch 6/100
58/58 [==============================] - 16s 268ms/step - loss: 0.3376 - accuracy: 0.8483 - val_loss: 0.3662 - val_accuracy: 0.8410
Epoch 7/100
58/58 [==============================] - 16s 277ms/step - loss: 0.3271 - accuracy: 0.8613 - val_loss: 0.3632 - val_accuracy: 0.8344
Epoch 8/100
58/58 [==============================] - 16s 273ms/step - loss: 0.3240 - accuracy: 0.8586 - val_loss: 0.3699 - val_accuracy: 0.8301
Epoch 9/100
58/58 [==============================] - 16s 270ms/step - loss: 0.3363 - accuracy: 0.8483 - val_loss: 0.3678 - val_accuracy: 0.8431
Epoch 10/100
58/58 [==============================] - 16s 269ms/step - loss: 0.3256 - accuracy: 0.8559 - val_loss: 0.4357 - val_accuracy: 0.7887
Epoch 11/100
58/58 [==============================] - 15s 265ms/step - loss: 0.3371 - accuracy: 0.8434 - val_loss: 0.3867 - val_accuracy: 0.8192
Epoch 12/100
58/58 [==============================] - 16s 270ms/step - loss: 0.3174 - accuracy: 0.8668 - val_loss: 0.3585 - val_accuracy: 0.8475
Epoch 13/100
58/58 [==============================] - 15s 262ms/step - loss: 0.3075 - accuracy: 0.8722 - val_loss: 0.3491 - val_accuracy: 0.8540
Epoch 14/100
58/58 [==============================] - 16s 265ms/step - loss: 0.3193 - accuracy: 0.8608 - val_loss: 0.3465 - val_accuracy: 0.8606
Epoch 15/100
58/58 [==============================] - 15s 263ms/step - loss: 0.3135 - accuracy: 0.8684 - val_loss: 0.3681 - val_accuracy: 0.8453
Epoch 16/100
58/58 [==============================] - 15s 261ms/step - loss: 0.3139 - accuracy: 0.8657 - val_loss: 0.3392 - val_accuracy: 0.8671
Epoch 17/100
58/58 [==============================] - 16s 271ms/step - loss: 0.3077 - accuracy: 0.8749 - val_loss: 0.3495 - val_accuracy: 0.8606
Epoch 18/100
58/58 [==============================] - 16s 270ms/step - loss: 0.3082 - accuracy: 0.8760 - val_loss: 0.3359 - val_accuracy: 0.8627
Epoch 19/100
58/58 [==============================] - 15s 264ms/step - loss: 0.3035 - accuracy: 0.8766 - val_loss: 0.4098 - val_accuracy: 0.8039
Epoch 20/100
58/58 [==============================] - 16s 272ms/step - loss: 0.3096 - accuracy: 0.8635 - val_loss: 0.3340 - val_accuracy: 0.8627
Epoch 21/100
58/58 [==============================] - 15s 263ms/step - loss: 0.2999 - accuracy: 0.8847 - val_loss: 0.3569 - val_accuracy: 0.8475
Epoch 22/100
58/58 [==============================] - 15s 264ms/step - loss: 0.2916 - accuracy: 0.8787 - val_loss: 0.3300 - val_accuracy: 0.8715
Epoch 23/100
58/58 [==============================] - 15s 264ms/step - loss: 0.2976 - accuracy: 0.8787 - val_loss: 0.3327 - val_accuracy: 0.8824
Epoch 24/100
58/58 [==============================] - 16s 267ms/step - loss: 0.3006 - accuracy: 0.8700 - val_loss: 0.3285 - val_accuracy: 0.8606
Epoch 25/100
58/58 [==============================] - 16s 269ms/step - loss: 0.3055 - accuracy: 0.8673 - val_loss: 0.3487 - val_accuracy: 0.8431
Epoch 26/100
58/58 [==============================] - 15s 260ms/step - loss: 0.2883 - accuracy: 0.8858 - val_loss: 0.3414 - val_accuracy: 0.8453
Epoch 27/100
58/58 [==============================] - 16s 269ms/step - loss: 0.2870 - accuracy: 0.8864 - val_loss: 0.3232 - val_accuracy: 0.8627
Epoch 28/100
58/58 [==============================] - 15s 262ms/step - loss: 0.2852 - accuracy: 0.8912 - val_loss: 0.3171 - val_accuracy: 0.8736
Epoch 29/100
58/58 [==============================] - 16s 268ms/step - loss: 0.2802 - accuracy: 0.8896 - val_loss: 0.3172 - val_accuracy: 0.8824
Epoch 30/100
58/58 [==============================] - 15s 263ms/step - loss: 0.2789 - accuracy: 0.8869 - val_loss: 0.3093 - val_accuracy: 0.8802
Epoch 31/100
58/58 [==============================] - 16s 269ms/step - loss: 0.2765 - accuracy: 0.8907 - val_loss: 0.3150 - val_accuracy: 0.8802
Epoch 32/100
58/58 [==============================] - 15s 263ms/step - loss: 0.2984 - accuracy: 0.8749 - val_loss: 0.3114 - val_accuracy: 0.8911
Epoch 33/100
58/58 [==============================] - 15s 265ms/step - loss: 0.2742 - accuracy: 0.8923 - val_loss: 0.3016 - val_accuracy: 0.8845
Epoch 34/100
58/58 [==============================] - 16s 274ms/step - loss: 0.2934 - accuracy: 0.8749 - val_loss: 0.3052 - val_accuracy: 0.8911
Epoch 35/100
58/58 [==============================] - 16s 267ms/step - loss: 0.2731 - accuracy: 0.8945 - val_loss: 0.3049 - val_accuracy: 0.8845
Epoch 36/100
58/58 [==============================] - 15s 263ms/step - loss: 0.2742 - accuracy: 0.8907 - val_loss: 0.2941 - val_accuracy: 0.8932
Epoch 37/100
58/58 [==============================] - 16s 269ms/step - loss: 0.2630 - accuracy: 0.9027 - val_loss: 0.3250 - val_accuracy: 0.8540
Epoch 38/100
58/58 [==============================] - 15s 263ms/step - loss: 0.2720 - accuracy: 0.8880 - val_loss: 0.3009 - val_accuracy: 0.8889
Epoch 39/100
58/58 [==============================] - 16s 271ms/step - loss: 0.2640 - accuracy: 0.8951 - val_loss: 0.3079 - val_accuracy: 0.8715
Epoch 40/100
58/58 [==============================] - 15s 263ms/step - loss: 0.2640 - accuracy: 0.8929 - val_loss: 0.3411 - val_accuracy: 0.8475
Epoch 41/100
58/58 [==============================] - 15s 262ms/step - loss: 0.2653 - accuracy: 0.8918 - val_loss: 0.3489 - val_accuracy: 0.8671
Epoch 42/100
58/58 [==============================] - 15s 266ms/step - loss: 0.2746 - accuracy: 0.8847 - val_loss: 0.2869 - val_accuracy: 0.9041
Epoch 43/100
58/58 [==============================] - 15s 259ms/step - loss: 0.2581 - accuracy: 0.9010 - val_loss: 0.3266 - val_accuracy: 0.8824
Epoch 44/100
58/58 [==============================] - 15s 259ms/step - loss: 0.2715 - accuracy: 0.8869 - val_loss: 0.3511 - val_accuracy: 0.8693
Epoch 45/100
58/58 [==============================] - 15s 265ms/step - loss: 0.2756 - accuracy: 0.8820 - val_loss: 0.3135 - val_accuracy: 0.8649
Epoch 46/100
58/58 [==============================] - 15s 259ms/step - loss: 0.2575 - accuracy: 0.8956 - val_loss: 0.2925 - val_accuracy: 0.8802
Epoch 47/100
58/58 [==============================] - 15s 265ms/step - loss: 0.2595 - accuracy: 0.8923 - val_loss: 0.2997 - val_accuracy: 0.8976
Epoch 48/100
58/58 [==============================] - 15s 258ms/step - loss: 0.2535 - accuracy: 0.9027 - val_loss: 0.3211 - val_accuracy: 0.8606
Epoch 49/100
58/58 [==============================] - 15s 259ms/step - loss: 0.2648 - accuracy: 0.8940 - val_loss: 0.2779 - val_accuracy: 0.9085
Epoch 50/100
58/58 [==============================] - 15s 267ms/step - loss: 0.2523 - accuracy: 0.8978 - val_loss: 0.2861 - val_accuracy: 0.8889
Epoch 51/100
58/58 [==============================] - 15s 257ms/step - loss: 0.2552 - accuracy: 0.8956 - val_loss: 0.2823 - val_accuracy: 0.9063
Epoch 52/100
58/58 [==============================] - 15s 259ms/step - loss: 0.2557 - accuracy: 0.8956 - val_loss: 0.3459 - val_accuracy: 0.8736
Epoch 53/100
58/58 [==============================] - 15s 259ms/step - loss: 0.2642 - accuracy: 0.8967 - val_loss: 0.2767 - val_accuracy: 0.8954
Epoch 54/100
58/58 [==============================] - 15s 259ms/step - loss: 0.2538 - accuracy: 0.8999 - val_loss: 0.2733 - val_accuracy: 0.9129
Epoch 55/100
58/58 [==============================] - 15s 263ms/step - loss: 0.2503 - accuracy: 0.8972 - val_loss: 0.2720 - val_accuracy: 0.9020
Epoch 56/100
58/58 [==============================] - 15s 258ms/step - loss: 0.2695 - accuracy: 0.8902 - val_loss: 0.2930 - val_accuracy: 0.8845
Epoch 57/100
58/58 [==============================] - 15s 262ms/step - loss: 0.2581 - accuracy: 0.8972 - val_loss: 0.2865 - val_accuracy: 0.8845
Epoch 58/100
58/58 [==============================] - 15s 264ms/step - loss: 0.2460 - accuracy: 0.9070 - val_loss: 0.2658 - val_accuracy: 0.9063
Epoch 59/100
58/58 [==============================] - 15s 257ms/step - loss: 0.2452 - accuracy: 0.9005 - val_loss: 0.2648 - val_accuracy: 0.9172
Epoch 60/100
58/58 [==============================] - 16s 268ms/step - loss: 0.2395 - accuracy: 0.9048 - val_loss: 0.2710 - val_accuracy: 0.9041
Epoch 61/100
58/58 [==============================] - 15s 262ms/step - loss: 0.2432 - accuracy: 0.9076 - val_loss: 0.2649 - val_accuracy: 0.9063
Epoch 62/100
58/58 [==============================] - 15s 259ms/step - loss: 0.2586 - accuracy: 0.8956 - val_loss: 0.2656 - val_accuracy: 0.9172
Epoch 63/100
58/58 [==============================] - 15s 265ms/step - loss: 0.2445 - accuracy: 0.9027 - val_loss: 0.2689 - val_accuracy: 0.8998
Epoch 64/100
58/58 [==============================] - 15s 262ms/step - loss: 0.2427 - accuracy: 0.9021 - val_loss: 0.2728 - val_accuracy: 0.8998
Epoch 65/100
58/58 [==============================] - 15s 263ms/step - loss: 0.2532 - accuracy: 0.8967 - val_loss: 0.2776 - val_accuracy: 0.8976
Epoch 66/100
58/58 [==============================] - 16s 270ms/step - loss: 0.2448 - accuracy: 0.8999 - val_loss: 0.2584 - val_accuracy: 0.9216
Epoch 67/100
58/58 [==============================] - 16s 269ms/step - loss: 0.2434 - accuracy: 0.9070 - val_loss: 0.2563 - val_accuracy: 0.9194
Epoch 68/100
58/58 [==============================] - 15s 265ms/step - loss: 0.2378 - accuracy: 0.9027 - val_loss: 0.2590 - val_accuracy: 0.9194
Epoch 69/100
58/58 [==============================] - 16s 271ms/step - loss: 0.2452 - accuracy: 0.9038 - val_loss: 0.2631 - val_accuracy: 0.9150
Epoch 70/100
58/58 [==============================] - 16s 265ms/step - loss: 0.2548 - accuracy: 0.8983 - val_loss: 0.2579 - val_accuracy: 0.9259
Epoch 71/100
58/58 [==============================] - 16s 271ms/step - loss: 0.2389 - accuracy: 0.9076 - val_loss: 0.2546 - val_accuracy: 0.9216
Epoch 72/100
58/58 [==============================] - 16s 273ms/step - loss: 0.2395 - accuracy: 0.9038 - val_loss: 0.2639 - val_accuracy: 0.9194
Epoch 73/100
58/58 [==============================] - 15s 265ms/step - loss: 0.2307 - accuracy: 0.9086 - val_loss: 0.2521 - val_accuracy: 0.9237
Epoch 74/100
58/58 [==============================] - 16s 273ms/step - loss: 0.2331 - accuracy: 0.9103 - val_loss: 0.2551 - val_accuracy: 0.9194
Epoch 75/100
58/58 [==============================] - 15s 265ms/step - loss: 0.2395 - accuracy: 0.9081 - val_loss: 0.3090 - val_accuracy: 0.8802
Epoch 76/100
58/58 [==============================] - 15s 263ms/step - loss: 0.2285 - accuracy: 0.9119 - val_loss: 0.2877 - val_accuracy: 0.8824
Epoch 77/100
58/58 [==============================] - 16s 267ms/step - loss: 0.2357 - accuracy: 0.9021 - val_loss: 0.2514 - val_accuracy: 0.9237
Epoch 78/100
58/58 [==============================] - 16s 272ms/step - loss: 0.2490 - accuracy: 0.9005 - val_loss: 0.3131 - val_accuracy: 0.8780
Epoch 79/100
58/58 [==============================] - 16s 267ms/step - loss: 0.2342 - accuracy: 0.9135 - val_loss: 0.2803 - val_accuracy: 0.8889
Epoch 80/100
58/58 [==============================] - 16s 268ms/step - loss: 0.2425 - accuracy: 0.9086 - val_loss: 0.2490 - val_accuracy: 0.9259
Epoch 81/100
58/58 [==============================] - 16s 273ms/step - loss: 0.2319 - accuracy: 0.9065 - val_loss: 0.3177 - val_accuracy: 0.8606
Epoch 82/100
58/58 [==============================] - 16s 270ms/step - loss: 0.2391 - accuracy: 0.9070 - val_loss: 0.2569 - val_accuracy: 0.9259
Epoch 83/100
58/58 [==============================] - 16s 266ms/step - loss: 0.2240 - accuracy: 0.9114 - val_loss: 0.2900 - val_accuracy: 0.8802
Epoch 84/100
58/58 [==============================] - 16s 273ms/step - loss: 0.2339 - accuracy: 0.9125 - val_loss: 0.2537 - val_accuracy: 0.9237
Epoch 85/100
58/58 [==============================] - 16s 271ms/step - loss: 0.2311 - accuracy: 0.9125 - val_loss: 0.2554 - val_accuracy: 0.9129
Epoch 86/100
58/58 [==============================] - 16s 267ms/step - loss: 0.2315 - accuracy: 0.9076 - val_loss: 0.2446 - val_accuracy: 0.9281
Epoch 87/100
58/58 [==============================] - 16s 271ms/step - loss: 0.2262 - accuracy: 0.9114 - val_loss: 0.2492 - val_accuracy: 0.9259
Epoch 88/100
58/58 [==============================] - 15s 263ms/step - loss: 0.2230 - accuracy: 0.9135 - val_loss: 0.2644 - val_accuracy: 0.9041
Epoch 89/100
58/58 [==============================] - 16s 267ms/step - loss: 0.2276 - accuracy: 0.9076 - val_loss: 0.2633 - val_accuracy: 0.9150
Epoch 90/100
58/58 [==============================] - 15s 262ms/step - loss: 0.2251 - accuracy: 0.9119 - val_loss: 0.2487 - val_accuracy: 0.9172
Epoch 91/100
58/58 [==============================] - 16s 269ms/step - loss: 0.2193 - accuracy: 0.9157 - val_loss: 0.2798 - val_accuracy: 0.8976
Epoch 92/100
58/58 [==============================] - 17s 287ms/step - loss: 0.2236 - accuracy: 0.9179 - val_loss: 0.2459 - val_accuracy: 0.9216
Epoch 93/100
58/58 [==============================] - 16s 270ms/step - loss: 0.2320 - accuracy: 0.9168 - val_loss: 0.2531 - val_accuracy: 0.9129
Epoch 94/100
58/58 [==============================] - 16s 277ms/step - loss: 0.2347 - accuracy: 0.9043 - val_loss: 0.2826 - val_accuracy: 0.8932
Epoch 95/100
58/58 [==============================] - 16s 274ms/step - loss: 0.2250 - accuracy: 0.9119 - val_loss: 0.2447 - val_accuracy: 0.9194
Epoch 96/100
58/58 [==============================] - 16s 283ms/step - loss: 0.2274 - accuracy: 0.9135 - val_loss: 0.2539 - val_accuracy: 0.9129
Epoch 97/100
58/58 [==============================] - 16s 276ms/step - loss: 0.2319 - accuracy: 0.9059 - val_loss: 0.2778 - val_accuracy: 0.8998
Epoch 98/100
58/58 [==============================] - 15s 262ms/step - loss: 0.2225 - accuracy: 0.9184 - val_loss: 0.2464 - val_accuracy: 0.9194
Epoch 99/100
58/58 [==============================] - 15s 260ms/step - loss: 0.2326 - accuracy: 0.9108 - val_loss: 0.2411 - val_accuracy: 0.9325
Epoch 100/100
58/58 [==============================] - 16s 266ms/step - loss: 0.2188 - accuracy: 0.9201 - val_loss: 0.2550 - val_accuracy: 0.9259

///// END /////

fig = px.line(
    history.history,
    y=['loss', 'val_loss'],
    labels={'index': "Epoch", 'value': "Loss"},
    title="Training and Validation Loss Over Time"
)

fig.show()

fig = px.line(
    history.history,
    y=['accuracy', 'val_accuracy'],
    labels={'index': "Epoch", 'value': "accuracy"},
    title="Training and Validation Accuracy Over Time"
)

fig.show()

def evaluate_model(model, test_data):
    
    results = model.evaluate(test_data, verbose=0)
    loss = results[0]
    acc = results[1]
    
    print("    Test Loss: {:.5f}".format(loss))
    print("Test Accuracy: {:.2f}%".format(acc * 100))
    
    y_pred = np.squeeze((model.predict(test_data) >= 0.5).astype(np.int))
    cm = confusion_matrix(test_data.labels, y_pred)
    clr = classification_report(test_data.labels, y_pred, target_names=["NEGATIVE", "POSITIVE"])
    
    plt.figure(figsize=(6, 6))
    sns.heatmap(cm, annot=True, fmt='g', vmin=0, cmap='Blues', cbar=False)
    plt.xticks(ticks=np.arange(2) + 0.5, labels=["NEGATIVE", "POSITIVE"])
    plt.yticks(ticks=np.arange(2) + 0.5, labels=["NEGATIVE", "POSITIVE"])
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.title("Confusion Matrix")
    plt.show()
    
    print("Classification Report:\n----------------------\n", clr)

evaluate_model(model, test_data)

///// ***** Output of above code snippet *****/////

Test Loss: 0.23010
Test Accuracy: 91.08%

Classification Report:
----------------------
               precision    recall  f1-score   support

    NEGATIVE       0.86      0.83      0.84       286
    POSITIVE       0.93      0.95      0.94       700

    accuracy                           0.91       986
   macro avg       0.90      0.89      0.89       986
weighted avg       0.91      0.91      0.91       986

//// END ///// 